/*
Copyright 2013-present Barefoot Networks, Inc. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/*
 * DO NOT EDIT:  This file is automatically generated.
 *
 */
//:: rocker_p4_prefix = "rocker_" + p4_prefix + "_"
//:: for lq in learn_quanta:
#ifndef _ROCKER_${p4_prefix}_LF_H_
#define _ROCKER_${p4_prefix}_LF_H_
typedef struct ${rocker_p4_prefix}${lq["name"]}_digest_entry {
//:: for field in lq["fields"].keys():
//::   byte_width = ( field_info[field]["bit_width"] + 7 ) / 8
//::   if byte_width > 4:
  unsigned char ${field}[${byte_width}];
//::   elif byte_width == 4:
  unsigned int ${field};
//::   elif byte_width == 2:
  unsigned short ${field};
//::   else:
  unsigned char ${field};
//::   #endif
//:: #endfor
} ${rocker_p4_prefix}${lq["name"]}_digest_entry_t;

// Should be able to cast this to pipe_flow_lrn_msg_t.
typedef struct  ${rocker_p4_prefix}${lq["name"]}_digest_msg {
  unsigned int                  dev_tgt;
  unsigned short                num_entries;
  ${rocker_p4_prefix}${lq["name"]}_digest_entry_t  *entries;
} ${rocker_p4_prefix}${lq["name"]}_digest_msg_t;

// Should be able to cast this to pipe_flow_lrn_notify_cb.
//:: digest_cb_fn_type = rocker_p4_prefix + "_" + lq["name"] + "_digest_notify_cb_t"

typedef unsigned int (*digest_cb_fn_type)(unsigned int sess_hdl,
                                              ${rocker_p4_prefix}${lq["name"]}_digest_msg_t *msg,
                                              void *callback_fn_cookie);
unsigned int
${lq["lf_register_fn"]}(unsigned int sess_hdl, digest_cb_fn_type cb_fn, void *client_data);

unsigned int
${lq["lf_deregister_fn"]}(unsigned int sess_hdl);

unsigned int
${lq["lf_notify_ack_fn"]}(unsigned int sess_hdl, ${rocker_p4_prefix}${lq["name"]}_digest_msg_t *digest_msg);
//:: #endfor
#endif //_ROCKER_${p4_prefix}_LF_H_

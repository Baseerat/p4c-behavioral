//:: rocker_p4_prefix = "rocker_" + p4_prefix + "_"
/*
Copyright 2013-present Barefoot Networks, Inc. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/*
 * DO NOT EDIT:  This file is automatically generated.
 *
 */

#ifndef _ROCKER_${p4_prefix}PD_H
#define _ROCKER_${p4_prefix}PD_H

typedef unsigned int rocker_p4_status_t;
typedef unsigned int rocker_p4_entry_hdl_t;


//:: def get_type(byte_width):
//::   if byte_width == 1:
//::     return "unsigned char"
//::   elif byte_width == 2:
//::     return "unsigned short"
//::   elif byte_width <= 4:
//::     return "unsigned int"
//::   else:
//::     return "unsigned char *"
//::   #endif
//:: #enddef
//::
//:: # match_fields is list of tuples (name, type)
//:: def gen_match_params(match_fields, field_info):
//::   params = []
//::   for field, type in match_fields:
//::     if type == "valid":
//::       params += [(field + "_valid", 1)]
//::       continue
//::     #endif
//::     f_info = field_info[field]
//::     bytes_needed = (f_info["bit_width"] + 7 ) / 8
//::     params += [(field, bytes_needed)]
//::     if type == "lpm": params += [(field + "_prefix_length", 2)]
//::     if type == "ternary": params += [(field + "_mask", bytes_needed)]
//::   #endfor
//::   return params
//:: #enddef
//::
//:: def gen_action_params(names, byte_widths, _get_type = get_type):
//::   params = []
//::   for name, width in zip(names, byte_widths):
//::     name = "action_" + name
//::     params += [(name, width)]
//::   #endfor
//::   return params
//:: #enddef
//::
//::

/* MATCH STRUCTS */

//:: for table, t_info in table_info.items():
//::   if not t_info["match_fields"]:
/* ${table} has no match fields */

//::     continue
//::   #endif
//::   match_params = gen_match_params(t_info["match_fields"], field_info)
typedef struct ${rocker_p4_prefix}${table}_match_spec {
//::   for name, width in match_params:
//::     if width > 4:
  unsigned char ${name}[${width}];
//::     else:
//::       type_ = get_type(width)
  ${type_} ${name};
//::     #endif
//::   #endfor
} ${rocker_p4_prefix}${table}_match_spec_t;

//:: #endfor


/* ACTION STRUCTS */

//:: for action, a_info in action_info.items():
//::   if not a_info["param_names"]:
/* ${action} has no parameters */

//::     continue
//::   #endif
//::   action_params = gen_action_params(a_info["param_names"],
//::                                     a_info["param_byte_widths"])
typedef struct ${rocker_p4_prefix}${action}_action_spec {
//::   for name, width in action_params:
//::     if width > 4:
  unsigned char ${name}[${width}];
//::     else:
//::       type_ = get_type(width)
  ${type_} ${name};
//::     #endif
//::   #endfor
} ${rocker_p4_prefix}${action}_action_spec_t;

//:: #endfor


/* ADD ENTRIES */

//:: for table, t_info in table_info.items():
//::   act_prof = t_info["action_profile"]
//::   if act_prof is not None: continue
//::   match_type = t_info["match_type"]
//::   has_match_spec = len(t_info["match_fields"]) > 0
//::   for action in t_info["actions"]:
//::     a_info = action_info[action]
//::     has_action_spec = len(a_info["param_names"]) > 0
//::     params = []
//::     if has_match_spec:
//::       params += [rocker_p4_prefix + table + "_match_spec_t *match_spec"]
//::     #endif
//::     if match_type == "ternary":
//::       params += ["int priority"]
//::     #endif
//::     if has_action_spec:
//::       params += [rocker_p4_prefix + action + "_action_spec_t *action_spec"]
//::     #endif
//::     if t_info["support_timeout"]:
//::       params += ["unsigned int ttl"]
//::     #endif
//::     params += [rocker_p4_prefix + table + "_entry_t *entry"]
//::     params += ["rocker_p4_entry_hdl_t *entry_hdl"]
//::     param_str = ",\n ".join(params)
//::     name = rocker_p4_prefix + table + "_table_entry_create_with_" + action
/**
 * @brief ${name}
//::     if has_match_spec:
 * @param match_spec
//::     #endif
//::     if match_type == "ternary":
 * @param priority
//::     #endif
//::     if has_action_spec:
 * @param action_spec
//::     #endif
 * @param entry_hdl
*/
rocker_p4_status_t
${name}
(
 ${param_str}
);

//::   #endfor
//:: #endfor

/* SET DEFAULT_ACTION */

//:: for table, t_info in table_info.items():
//::   act_prof = t_info["action_profile"]
//::   if act_prof is not None: continue
//::   for action in t_info["actions"]:
//::     name = "rocker_" + p4_prefix + "_" + table + "_set_default_action_" + action
//::     a_info = action_info[action]
//::     has_action_spec = len(a_info["param_names"]) > 0
//::     params = ["void"]
//::     if has_action_spec:
//::       params = [rocker_p4_prefix + action + "_action_spec_t *action_spec"]
//::     #endif
//::     param_str = ",\n ".join(params)
/**
 * @brief ${name}
//::     if has_action_spec:
 * @param action_spec
//::     #endif
*/
unsigned int
${name}
(
 ${param_str}
);

//::   #endfor
//:: #endfor



#endif
